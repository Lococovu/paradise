function loadRooms():
  load all yaml from directory "/plugins/Rooms"
  loop all of the currently loaded yaml files:
    set {_file} to loop-value-1
    set {_nodes::*} to all yaml nodes of {_file}

    loop {_nodes::*}:
      set {_node} to loop-value-2
      set {_index} to loop-index parsed as number
      set {_value} to yaml value loop-value-2 from {_file}
      
      # Проверяем...
      set {_temp::*} to {_node} split at "."
      set {_size} to size of {_temp::*}
      {_temp::%{_size}%} is "type"
      {_value} is "room":
        set {_node::previous} to {_index} - 1
        loadRoomNode({_nodes::%{_node::previous}%}, {_file})

# Функция, которая займётся загрузкой квартир через базу
# данных.
function loadRoomNode(node: string, file: string):
  # Подготавливаем ИД предмета
  set {_temp::*} to {_node} split at "."
  set {_size} to size of {_temp::*}
  set {_id} to {_temp::%{_size}%}

  # Загружаем самые главные данные про квартиру
  # (её регион)
  set {_regions::*} to yaml list "%{_node}%.regions" from {_file}

  set {_holoLocation} to yaml value "%{_node}%.hologramLocation" from {_file}
  set {_holoLocation} to getLocation({_holoLocation}, "world")
  set {_holoLocation} to location of block at {_holoLocation}

  size of {_regions::*} >= 1
  {_holoLocation} is set:
    # И так же загружаем другие данные про квартиру
    set {_roomType} to yaml value "%{_node}%.roomType" from {_file}
    {_roomType} is not set:
      set {_roomType} to "unknown"
    
    set {_address} to yaml value "%{_node}%.address" from {_file}
    {_address} is not set:
      set {_address} to "Неизвестно"

    set {_price} to yaml value "%{_node}%.price" from {_file}
    {_price} is not set:
      set {_price} to 1500

    set {_modifiers::*} to yaml list "%{_node}%.modifiers" from {_file}
    if size of {_modifiers::*} <= 0:
      add "rentable" to {_modifiers::*}

    # Ну а теперь сохраняем все данные про эту квартиру

    # loop {_regions::*}:
    #   set {_temp::*} to loop-value split at "/"

    #   set {_location::1} to getLocation("%{_temp::1}%", "world")
    #   set {_location::2} to getLocation("%{_temp::2}%", "world")

    set {data::rooms::%{_id}%::regions::*} to {_regions::*}
    set {data::rooms::%{_id}%::hologramLocation} to {_holoLocation}

    set {data::rooms::%{_holoLocation}%::roomId} to {_id}

    set {data::rooms::%{_id}%::type} to {_roomType}
    set {data::rooms::%{_id}%::address} to {_address}
    set {data::rooms::%{_id}%::price} to {_price}
    
    set {data::rooms::%{_id}%::configFile} to {_file}
    set {data::rooms::%{_id}%::configNode} to {_node}

    set {_center} to yaml value "%{_node}%.center" from {_file}
    set {data::rooms::%{_id}%::center} to getLocation("%{_center}%", "world")

    set {data::rooms::%{_id}%::isRentable} to true if rooms_isRentable({_modifiers::*}) is true else false
    set {data::rooms::%{_id}%::isBuyable} to true if rooms_isBuyable({_modifiers::*}) is true else false

    loadOccupationData("%{_id}%", "%{_node}%", "%{_file}%")

    # Грузим регионы
    loop {_regions::*}:
      set {_temp::*} to loop-value split at "/"

      set {_location::1} to getLocation("%{_temp::1}%", "world")
      set {_location::2} to getLocation("%{_temp::2}%", "world")

      loop all blocks within {_location::1} and {_location::2}:
        set {block::%location of loop-block%::room} to {_id}

    add {_id} to {data::rooms::list::*}

function loadOccupationData(id: string, node: string, file: string):
  reload yaml {_file}

  set {_uuid} to yaml value "%{_node}%.occupant.uuid" from {_file}
  set {_character} to yaml value "%{_node}%.occupant.character" from {_file}

  set {data::rooms::%{_id}%::occupant::uuid} to {_uuid}
  set {data::rooms::%{_id}%::occupant::character} to {_character}

  # Доп. данные, если игрок арендовал квартиру
  if rooms_isRentable({_modifiers::*}):
    set {data::rooms::%{_id}%::occupant::rentTime} to yaml value "%{_node}%.occupant.rentTime" from {_file}
    if {data::rooms::%{_id}%::occupant::rentTime} is not set:
      delete {data::rooms::%{_id}%::occupant::*}

  {_uuid} and {_character} is set
  {data::rooms::%{_uuid}%::%{_character}%::rooms::*} doesn't contain {_id}:
    add {_id} to {data::rooms::%{_uuid}%::%{_character}%::rooms::*}

# Функция, которая займётся загрузкой голограмм для
# каждого игрока
function loadRoomsHolograms(player: player):
  loop {data::rooms::list::*}:
    set {_id} to loop-value

    # Берём некоторые данные про данную квартиру
    set {_location} to {data::rooms::%{_id}%::hologramLocation}
    
    {_location} is set:
      set {workers::%{_player}%::viewWorker::block::%{_location}%::type} to "hologram"
      set {workers::%{_player}%::viewWorker::block::%{_location}%::hoverAction} to "RM_Holo_RoomEntranceCreate"
      set {workers::%{_player}%::viewWorker::block::%{_location}%::clickAction} to "RM_Holo_RoomEntranceClick"

on load:
  delete {data::rooms::*}
  loadRooms()