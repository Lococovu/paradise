function EM_templateWorker(player: player):
  set {_code} to "template"

  set {_waiting} to true

  while {_waiting} is true:
    if {workers::%{_player}%::emotions} is set:
      set {_action} to {workers::%{_player}%::emotions}

      if {_action} is "stop":
        stop

    # !!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Что-то делаем
    # !!!!!!!!!!!!!!!!!!!!!!!!!!!


    # Синхронизация
    if {emotions::%{_player}%::%{_code}%::percent} is not {_fatigue}:
      set {emotions::%{_player}%::%{_code}%::percent} to {_fatigue}
    wait 1 tick

# Функция, которая проверит - нужно ли
# вызывать функцию EM_templateEffects на игрока 
function EM_templateCheck(player: player):
  if true:
    EM_templateEffects({_player})

# Функция, которая будет возвращать предмет в зависимости
# от текущей настройки эмоции
function EM_templateGetItem(player: player) :: item:
  set {_name} to EM_templateGetName({_player})

  set {_item} to player head named "%{_name}%" with lore "", "&f &f"
  add "{SkullOwner:{Id:"""",Properties:{textures:[{Value:""""}]}}}" to item-nbt of {_item}

  return {_item}

function EM_templateGetName(player: player) :: string:
  set {_name} to "Темплейт"

  return {_name}

# Функция, которая будет давать игроку определённые эффекты
# по этой эмоции.
function EM_templateEffects(player: player):
  set {_code} to "template"

  # Проверяем работоспособность воркера
  if {emotions::%{_player}%::%{_code}%::effecting} is set:
    set {workers::%{_player}%::emotions::%{_code}%::effects::lastChecked} to now
    stop

  if {emotions::%{_player}%::%{_code}%::active} is true:
    delete {emotions::%{_player}%::%{_code}%::active}
    stop

  # Удаляем все ненужные переменные
  delete {workers::%{_player}%::emotions::%{_code}%::effects}
  delete {workers::%{_player}%::emotions::%{_code}%::effects::*}

  # Метим эту эмоцию как активную
  set {emotions::%{_player}%::%{_code}%::active} to true

  # Запускаем воркер
  set {_waiting} to true

  while {_waiting} is true:
    if {_player} is offline:
      set {_action} to "stop"

    # Проверяем целостность переменных
    if {emotions::%{_player}%::%{_code}%::active} is not true:
      set {emotions::%{_player}%::%{_code}%::active} to true

    # Действие: Остановка воркера
    if {_action} is "stop":
      remove slowness from {_player}
      reset {_player}'s walking speed
      
      delete {workers::%{_player}%::emotions::%{_code}%::effects}
      delete {workers::%{_player}%::emotions::%{_code}%::effects::*}

      delete {emotions::%{_player}%::%{_code}%::effecting}

      stop

    # Проверяем когда последний раз была произведенна проверка
    set {_lastChecked} to {workers::%{_player}%::emotions::%{_code}%::effects::lastChecked}
    if {_lastChecked} is not set:
      set {_lastChecked} to true
      set {workers::%{_player}%::emotions::%{_code}%::effects::lastChecked} to now
    
    set {_difference} to difference between {_lastChecked} and now

    if {_difference} >= 2 seconds:
      # Меняем статус
      if {_status} isn't "active":
        set {_status} to "active"
    else:
      if {_status} isn't "effecting":
        set {_status} to "effecting"

    if {_status} is "effecting":
      if {emotions::%{_player}%::%{_code}%::effecting} is not true:
        set {emotions::%{_player}%::%{_code}%::effecting} to true

      # !!!!!!!!!!!!!!!!!!!!!!!!!!!
      # Накидываем эфекты на игрока
      # !!!!!!!!!!!!!!!!!!!!!!!!!!!
      
      if {emotions::%{_player}%::%{_code}%::effecting} is not true:
        set {emotions::%{_player}%::%{_code}%::effecting} to true

    else:
      if {emotions::%{_player}%::%{_code}%::effecting} is true:
        set {emotions::%{_player}%::%{_code}%::effecting} to false

      if {_difference} >= 15 seconds:
        set {_action} to "stop"

    wait 1 tick