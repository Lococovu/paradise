# Функция, которая проверит - знает ли игрок про то или иное
# свойство другого игрока (player -> target)
function doTargetKnownToPlayer(target: player, player: player, property: string) :: boolean:
  if yaml list "relationship.%{_target}'s uuid%.knows" from "player-%{_player}'s uuid%" is set:
    # Проверяем.
    set {_knows::*} to yaml list "relationship.%{_target}'s uuid%.knows" from "player-%{_player}'s uuid%"

    return true if {_knows::*} contains {_property} else false
  else:
    return false

# Функция, которая изменит эту хуету
function addRelationshipKnownProperty(target: player, player: player, property: string):
  if yaml list "relationship.%{_target}'s uuid%.knows" from "player-%{_player}'s uuid%" is set:
    set {_knows::*} to yaml list "relationship.%{_target}'s uuid%.knows" from "player-%{_player}'s uuid%"
    add {_property} to {_knows::*}
  else:
    add {_property} to {_knows::*}

  set yaml list "relationship.%{_target}'s uuid%.knows" from "player-%{_player}'s uuid%" to {_knows::*}
  save yaml "player-%{_player}'s uuid%"

# Функция, которая уберёт что-то из списка знакомого
function removeRelationshipKnownProperty(target: player, player: player, property: string):
  if yaml list "relationship.%{_target}'s uuid%.knows" from "player-%{_player}'s uuid%" is set:
    set {_knows::*} to yaml list "relationship.%{_target}'s uuid%.knows" from "player-%{_player}'s uuid%"
    if {_knows::*} contains {_property}:
      remove {_property} from {_knows::*}
    
    if size of {_knows::*} <= 0:
      delete yaml list "relationship.%{_target}'s uuid%.knows" from "player-%{_player}'s uuid%"
    else:
      set yaml list "relationship.%{_target}'s uuid%.knows" from "player-%{_player}'s uuid%" to {_knows::*}
    save yaml "player-%{_player}'s uuid%"

command addrel [<player>] [<string>]:
  trigger:
    addRelationshipKnownProperty(arg-1, player, arg-2)

command removeRel [<player>] [<string>]:
  trigger:
    removeRelationshipKnownProperty(player, arg-1, arg-2)